@using SocialNetwork.Models.Home;
@using SocialNetwork.Domain.Entities.Enums;
@model PageVM;
@{
    ViewData["Title"] = "Pages";
}

@* Add anti-forgery token *@
@Html.AntiForgeryToken()

<!-- main contents -->
<main id="site__main" class="2xl:ml-[--w-side] xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div class="flex max-lg:flex-col 2xl:gap-12 gap-10 2xl:max-w-[1220px] max-w-[1065px] mx-auto" id="js-oversized">
        <div class="flex-1">
            <div class="max-w-[680px] w-full mx-auto">
                <div id="errorAlert" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <span class="block sm:inline" id="errorMessage"></span>
                </div>

                @if (TempData["Error"] != null)
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                        <span class="block sm:inline">@TempData["Error"]</span>
                    </div>
                }

                <div class="page-heading">
                    <h1 class="page-title">Users</h1>
                </div>

                <!-- users grid -->
                <div class="grid sm:grid-cols-2 gap-4 mt-6">
                    @foreach (var user in Model.Pages)
                    {
                        <div class="card" id="user-card-@user.IdentityId">
                            <a href="#">
                                <div class="card-media sm:aspect-[2/1.7] h-40">
                                    <img src="@user.Img" alt="" class="object-cover w-full h-full">
                                    <div class="absolute inset-0 bg-black/10"></div>
                                </div>
                            </a>
                            <div class="card-body p-4">
                                <a href="#"> <h4 class="font-semibold text-black dark:text-white">@user.Name</h4> </a>
                                <p class="text-sm text-gray-500 dark:text-gray-400">@user.Bio</p>
                                
                                <div class="friendship-buttons mt-2" data-user-id="@user.IdentityId">
                                    @switch (user.FriendshipStatus)
                                    {
                                        case FriendshipStatus.Accepted:
                                            <div class="flex items-center gap-2">
                                                <span class="button bg-blue-50 text-blue-600 flex-1 p-2 rounded-md text-center">Friends</span>
                                                <button onclick="handleFriendship('RemoveFriend', '@user.IdentityId')" 
                                                        class="button bg-red-50 text-red-600 px-4 p-2 rounded-md hover:bg-red-100 transition-colors">
                                                    Remove
                                                </button>
                                            </div>
                                            break;

                                        case FriendshipStatus.Pending:
                                            if (user.IsOutgoingRequest)
                                            {
                                                <span class="button bg-gray-50 text-gray-600 w-full p-2 rounded-md text-center">Request Sent</span>
                                            }
                                            else
                                            {
                                                <div class="flex gap-2">
                                                    <button onclick="handleFriendship('AcceptRequest', '@user.IdentityId')"
                                                            class="button bg-blue-600 text-white flex-1 p-2 rounded-md hover:bg-blue-700 transition-colors">
                                                        Accept
                                                    </button>
                                                    <button onclick="handleFriendship('RejectRequest', '@user.IdentityId')"
                                                            class="button bg-gray-50 text-gray-600 px-4 p-2 rounded-md hover:bg-gray-100 transition-colors">
                                                        Decline
                                                    </button>
                                                </div>
                                            }
                                            break;

                                        default:
                                            <button onclick="handleFriendship('SendRequest', '@user.IdentityId')"
                                                    class="button bg-blue-600 text-white w-full p-2 rounded-md hover:bg-blue-700 transition-colors">
                                                Add Friend
                                            </button>
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- load more -->
                <div class="flex justify-center mt-6">
                    <button type="button" class="bg-white py-2 px-5 rounded-full shadow-md font-semibold text-sm dark:bg-dark2">Load more...</button>
                </div>
            </div>
        </div>

        <!-- sidebar -->
        <div class="lg:w-[330px] w-full">
            <div class="box p-5 px-6">
                <div class="flex items-baseline justify-between text-black dark:text-white">
                    <h3 class="font-bold text-base">Filters</h3>
                </div>
                <div class="mt-4">
                    <input type="text" placeholder="Search users" class="w-full p-2 border rounded-md">
                </div>
            </div>
        </div>
    </div>
</main>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let connection;

        // Инициализация SignalR
        async function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/friendshipHub")
                .build();

            // Обработчик получения запроса в друзья
            connection.on("ReceiveFriendRequest", (data) => {
                updateFriendshipUI(data.userId, data.status, data.isOutgoingRequest);
            });

            // Обработчик принятия запроса в друзья
            connection.on("FriendRequestAccepted", (data) => {
                updateFriendshipUI(data.userId, data.status, data.isOutgoingRequest);
            });

            // Обработчик отклонения запроса в друзья
            connection.on("FriendRequestRejected", (data) => {
                updateFriendshipUI(data.userId, data.status, data.isOutgoingRequest);
            });

            // Обработчик удаления из друзей
            connection.on("FriendRemoved", (data) => {
                updateFriendshipUI(data.userId, data.status, data.isOutgoingRequest);
            });

            try {
                await connection.start();
                // Добавляем текущего пользователя в группу SignalR
                const userId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
                await connection.invoke("AddToGroup", userId);
            } catch (err) {
                console.error(err);
                setTimeout(initializeSignalR, 5000);
            }
        }

        // Вызываем инициализацию при загрузке страницы
        initializeSignalR();

        function handleFriendship(action, userId) {
            // Получаем токен для защиты от CSRF
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/Friendship/${action}?friendId=${userId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateFriendshipUI(userId, data.newStatus, data.isOutgoingRequest);
                } else {
                    showError(data.message || 'Произошла ошибка');
                }
            })
            .catch(error => {
                showError('Произошла ошибка при обработке запроса');
                console.error('Error:', error);
            });
        }

        function updateFriendshipUI(userId, status, isOutgoingRequest) {
            const container = document.querySelector(`.friendship-buttons[data-user-id="${userId}"]`);
            if (!container) return;

            let html = '';
            
            switch (status) {
                case 'Accepted':
                    html = `
                        <div class="flex items-center gap-2">
                            <span class="button bg-blue-50 text-blue-600 flex-1 p-2 rounded-md text-center">Friends</span>
                            <button onclick="handleFriendship('RemoveFriend', '${userId}')" 
                                    class="button bg-red-50 text-red-600 px-4 p-2 rounded-md hover:bg-red-100 transition-colors">
                                Remove
                            </button>
                        </div>`;
                    break;

                case 'Pending':
                    if (isOutgoingRequest) {
                        html = `<span class="button bg-gray-50 text-gray-600 w-full p-2 rounded-md text-center">Request Sent</span>`;
                    } else {
                        html = `
                            <div class="flex gap-2">
                                <button onclick="handleFriendship('AcceptRequest', '${userId}')"
                                        class="button bg-blue-600 text-white flex-1 p-2 rounded-md hover:bg-blue-700 transition-colors">
                                    Accept
                                </button>
                                <button onclick="handleFriendship('RejectRequest', '${userId}')"
                                        class="button bg-gray-50 text-gray-600 px-4 p-2 rounded-md hover:bg-gray-100 transition-colors">
                                    Decline
                                </button>
                            </div>`;
                    }
                    break;

                default:
                    html = `
                        <button onclick="handleFriendship('SendRequest', '${userId}')"
                                class="button bg-blue-600 text-white w-full p-2 rounded-md hover:bg-blue-700 transition-colors">
                            Add Friend
                        </button>`;
                    break;
            }

            container.innerHTML = html;
        }

        function showError(message) {
            const errorAlert = document.getElementById('errorAlert');
            const errorMessage = document.getElementById('errorMessage');
            
            errorMessage.textContent = message;
            errorAlert.classList.remove('hidden');
            
            setTimeout(() => {
                errorAlert.classList.add('hidden');
            }, 3000);
        }
    </script>
}

